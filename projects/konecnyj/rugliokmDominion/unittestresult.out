

***************************************
unittest1: test drawCard function
***************************************
test non-shuffle draw:
TEST PASSED: drawCard returns 0 
TEST PASSED: Played cards are unchanged 
TEST PASSED: Played card count is unchanged 
TEST PASSED: Player 1: Correct card added to player's hand 
TEST PASSED: Player 1: Only one cards added 
TEST PASSED: Player 1: All cards not drawn remain in deck 
TEST PASSED: Player 1: Deck count has one less card 
TEST PASSED: Player 1: Discard is unchanged 
TEST PASSED: Player 1: Discard count is unchanged 
TEST PASSED: Player 2: Hand is unchanged 
TEST PASSED: Player 2: Hand count is unchanged 
TEST PASSED: Player 2: Deck is unchanged 
TEST PASSED: Player 2: Deck count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 
test shuffle draw:
TEST PASSED: drawCard returns 0 
TEST PASSED: Played cards are unchanged 
TEST PASSED: Played card count is unchanged 
TEST PASSED: Player 1: Correct card added to player's hand 
TEST PASSED: Player 1: Only one cards added 
TEST PASSED: Player 1: Discard cards now in deck 
TEST PASSED: Player 1: Deck has one card 
TEST PASSED: Player 1: Discard count is now zero 
TEST PASSED: Player 2: Hand is unchanged 
TEST PASSED: Player 2: Hand count is unchanged 
TEST PASSED: Player 2: Deck is unchanged 
TEST PASSED: Player 2: Deck count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 


***************************************
unittest2: test discardCard function
***************************************
TEST PASSED: discardCard returns 0 
Test played pile discard:
TEST PASSED: All played cards originally in pile are still there 
TEST PASSED: Played card count has one more card 
TEST PASSED: Player 1: All played cards originally in hand are still there 
TEST PASSED: Player 1: Only one cards removed 
TEST PASSED: Player 1: Deck is unchanged 
TEST PASSED: Player 1: Deck count is unchanged 
TEST PASSED: Player 1: Discard is unchanged 
TEST PASSED: Player 1: Discard count is unchanged 
TEST PASSED: Player 2: Hand is unchanged 
TEST PASSED: Player 2: Hand count is unchanged 
TEST PASSED: Player 2: Deck is unchanged 
TEST PASSED: Player 2: Deck count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 
TEST PASSED: discardCard returns 0 
Test trash discard
TEST PASSED: Played cards are unchanged 
TEST PASSED: Played card count is unchanged 
TEST PASSED: Player 1: All played cards originally in hand are still there 
TEST PASSED: Player 1: Only one cards removed 
TEST PASSED: Player 1: Deck is unchanged 
TEST PASSED: Player 1: Deck count is unchanged 
TEST PASSED: Player 1: Discard is unchanged 
TEST PASSED: Player 1: Discard count is unchanged 
TEST PASSED: Player 2: Hand is unchanged 
TEST PASSED: Player 2: Hand count is unchanged 
TEST PASSED: Player 2: Deck is unchanged 
TEST PASSED: Player 2: Deck count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 


***************************************
unittest3: test numHandCards function
***************************************
TEST PASSED: numHandCards returns the count in player 1's hand 


***************************************
unittest4: test whoseTurn function
***************************************
TEST PASSED: Correct player's turn is returned 


***************************************
cardtest1: test playAdventurer function
***************************************
TEST PASSED: cardEffect returns 0 
TEST PASSED: All cards which were in the played pile originally are still there in the same order 
TEST FAILED: Played cards has added one card 
TEST FAILED: Player 1: Adventurer card is no longer in player's hand 
TEST PASSED: Player 1: Two treasure cards added 
TEST FAILED: Player 1: Only two cards added 
TEST PASSED: Player 1: The current state of the deck is the same as before cards were added to the deck 
TEST FAILED: Player 1: Deck count is back to its precondition state 
TEST PASSED: Player 1: All old cards in discard are still there 
TEST FAILED: Player 1: Discard count has 2 new cards 
TEST FAILED: Player 1: Discarded cards are both smithy 
TEST PASSED: Player 2: Hand is unchanged 
TEST PASSED: Player 2: Hand count is unchanged 
TEST PASSED: Player 2: Deck is unchanged 
TEST PASSED: Player 2: Deck count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 


***************************************
cardtest2: test playSmithy function
***************************************
TEST PASSED: cardEffect returns 0 
TEST PASSED: All cards which were in the played pile originally are still there in the same order 
TEST PASSED: Played cards has added one card 
TEST PASSED: Played card is smithy 
TEST PASSED: Player 1: Smithy card is no longer in player's hand 
TEST FAILED: Player 1: Only three cards added 
TEST PASSED: Player 1: The same cards are still in deck minus the three removed 
TEST FAILED: Player 1: Deck count has three less cards 
TEST PASSED: Player 1: Discard is unchanged 
TEST PASSED: Player 1: Discard count is unchanged 
TEST PASSED: Player 2: Hand is unchanged 
TEST PASSED: Player 2: Hand count is unchanged 
TEST PASSED: Player 2: Deck is unchanged 
TEST PASSED: Player 2: Deck count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 


***************************************
cardtest3: test playMine function
***************************************
TEST PASSED: cardEffect returns 0 
TEST PASSED: All cards which were in the played pile originally are still there in the same order 
TEST FAILED: Played cards has added one card 
TEST PASSED: Played card is a mine card 
TEST PASSED: Player 1: Mine card is no longer in player's hand 
TEST PASSED: Player 1: Copper card is now a Gold card 
TEST PASSED: Player 1: Only one card added 
TEST PASSED: Player 1: The current state of the deck is the same as before cards were added to the deck 
TEST PASSED: Player 1: Deck count is equal to precondition state 
TEST PASSED: Player 1: Discard is unchanged 
TEST PASSED: Player 1: Discard count is unchanged 
TEST PASSED: Player 2: Hand is unchanged 
TEST PASSED: Player 2: Hand count is unchanged 
TEST PASSED: Player 2: Deck is unchanged 
TEST PASSED: Player 2: Deck count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 


***************************************
cardtest4: test playEmbargo function
***************************************
TEST PASSED: cardEffect returns 0 
TEST PASSED: An embargo token is placed on mine 
TEST PASSED: 2 coins added 
TEST PASSED: Played cards are unchanged 
TEST PASSED: Played card count is unchanged 
TEST PASSED: Player 1: Embargo card is no longer in player's hand 
TEST PASSED: Player 1: Card count in hand is equal to precondition state 
TEST PASSED: Player 1: The current state of the deck is the same as before cards were added to the deck 
TEST PASSED: Player 1: Deck count is equal to precondition state 
TEST PASSED: Player 1: All cards which were in the discard pile originally are still there in the same order 
TEST PASSED: Player 1: Discard count has no more cards 
TEST PASSED: Player 2: Hand is unchanged 
TEST PASSED: Player 2: Hand count is unchanged 
TEST PASSED: Player 2: Deck is unchanged 
TEST PASSED: Player 2: Deck count is unchanged 
TEST PASSED: Player 2: Discard is unchanged 
TEST PASSED: Player 2: Discard count is unchanged 
File 'dominion.c'
Lines executed:34.35% of 559
Branches executed:38.80% of 415
Taken at least once:25.30% of 415
Calls executed:23.16% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:36
        -:    0:Programs:21
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 394437 returned 100% blocks executed 100%
   394437:    8:int compare(const void* a, const void* b) {
   394437:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 197043 (fallthrough)
branch  1 taken 197394
   197043:   10:    return 1;
   197394:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 87126 (fallthrough)
branch  1 taken 110268
    87126:   12:    return -1;
   110268:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 28 returned 100% blocks executed 88%
       28:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       28:   44:  SelectStream(1);
call    0 returned 28
       28:   45:  PutSeed((long)randomSeed);
call    0 returned 28
        -:   46:  
        -:   47:  //check number of players
       28:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 28 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 28
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       28:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      308:   57:  for (i = 0; i < 10; i++)
branch  0 taken 280
branch  1 taken 28 (fallthrough)
        -:   58:    {
     3080:   59:      for (j = 0; j < 10; j++)
branch  0 taken 2800
branch  1 taken 280 (fallthrough)
        -:   60:        {
     2800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 2520 (fallthrough)
branch  1 taken 280
branch  2 taken 0 (fallthrough)
branch  3 taken 2520
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       28:   73:  if (numPlayers == 2)
branch  0 taken 28 (fallthrough)
branch  1 taken 0
        -:   74:    {
       28:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       28:   87:  if (numPlayers == 2)
branch  0 taken 28 (fallthrough)
branch  1 taken 0
        -:   88:    {
       28:   89:      state->supplyCount[estate] = 8;
       28:   90:      state->supplyCount[duchy] = 8;
       28:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       28:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       28:  102:  state->supplyCount[silver] = 40;
       28:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      588:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 560
branch  1 taken 28 (fallthrough)
        -:  107:    {
     4620:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 4340
branch  1 taken 280 (fallthrough)
        -:  109:	{
     4340:  110:	  if (kingdomCards[j] == i)
branch  0 taken 280 (fallthrough)
branch  1 taken 4060
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      280:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 280 (fallthrough)
branch  1 taken 0
branch  2 taken 28 (fallthrough)
branch  3 taken 252
        -:  114:		{
       56:  115:		  if (numPlayers == 2){ 
branch  0 taken 28 (fallthrough)
branch  1 taken 0
       28:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      252:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      280:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     4060:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       84:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 56
branch  1 taken 28 (fallthrough)
        -:  139:    {
       56:  140:      state->deckCount[i] = 0;
      224:  141:      for (j = 0; j < 3; j++)
branch  0 taken 168
branch  1 taken 56 (fallthrough)
        -:  142:	{
      168:  143:	  state->deck[i][j] = estate;
      168:  144:	  state->deckCount[i]++;
        -:  145:	}
      448:  146:      for (j = 3; j < 10; j++)
branch  0 taken 392
branch  1 taken 56 (fallthrough)
        -:  147:	{
      392:  148:	  state->deck[i][j] = copper;
      392:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       84:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 56
branch  1 taken 28 (fallthrough)
        -:  155:    {
       56:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 56
branch  1 taken 0 (fallthrough)
branch  2 taken 56
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       84:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 56
branch  1 taken 28 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       56:  166:      state->handCount[i] = 0;
       56:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      784:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 756
branch  1 taken 28 (fallthrough)
        -:  177:    {
      756:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       28:  182:  state->outpostPlayed = 0;
       28:  183:  state->phase = 0;
       28:  184:  state->numActions = 1;
       28:  185:  state->numBuys = 1;
       28:  186:  state->playedCardCount = 0;
       28:  187:  state->whoseTurn = 0;
       28:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      168:  192:  for (it = 0; it < 5; it++){
branch  0 taken 140
branch  1 taken 28 (fallthrough)
      140:  193:    drawCard(state->whoseTurn, state);
call    0 returned 140
        -:  194:  }
        -:  195:
       28:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 28
        -:  197:
       28:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 707 returned 100% blocks executed 100%
      707:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      707:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      707:  209:  if (state->deckCount[player] < 1)
branch  0 taken 438 (fallthrough)
branch  1 taken 269
      438:  210:    return -1;
      269:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 269
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    57260:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 56722
branch  1 taken 269 (fallthrough)
    56722:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 56722
    56722:  216:    newDeck[newDeckPos] = state->deck[player][card];
    56722:  217:    newDeckPos++;
  4810360:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 4753638
branch  1 taken 56722 (fallthrough)
  4753638:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    56722:  221:    state->deckCount[player]--;
        -:  222:  }
    56991:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 56722
branch  1 taken 269 (fallthrough)
    56722:  224:    state->deck[player][i] = newDeck[i];
    56722:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      269:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 3 returned 100% blocks executed 100%
        3:  311:int numHandCards(struct gameState *state) {
        3:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 3
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 23206 returned 100% blocks executed 100%
    23206:  320:int supplyCount(int card, struct gameState *state) {
    23206:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 16022 returned 100% blocks executed 100%
    16022:  346:int whoseTurn(struct gameState *state) {
    16022:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 103996 returned 100% blocks executed 100%
   103996:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   103996:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 327 (fallthrough)
branch  1 taken 103669
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    56489:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 56162
branch  1 taken 327 (fallthrough)
    56162:  534:      state->deck[player][i] = state->discard[player][i];
    56162:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      327:  538:    state->deckCount[player] = state->discardCount[player];
      327:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      327:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 327
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      327:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      327:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      327:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      327:  559:    if (deckCounter == 0)
branch  0 taken 114 (fallthrough)
branch  1 taken 213
      114:  560:      return -1;
        -:  561:
      213:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      213:  563:    state->deckCount[player]--;
      213:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   103669:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   103669:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   103669:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   103669:  576:    state->deckCount[player]--;
   103669:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   103882:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 7482 returned 100% blocks executed 20%
     7482:  583:int getCost(int cardNumber)
        -:  584:{
     7482:  585:  switch( cardNumber ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 2193
branch  5 taken 2328
branch  6 taken 2076
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 885
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
     2193:  596:      return 0;
        -:  597:    case silver:
     2328:  598:      return 3;
        -:  599:    case gold:
     2076:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
      885:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 16016 returned 100% blocks executed 13%
    16016:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    16016:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 16016
    16016:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    16016:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    16016:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    16016:  660:  int z = 0;// this is the counter for the temp hand
    16016:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 6719 (fallthrough)
branch  1 taken 9297
     6719:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    16016:  667:  switch( card ) 
branch  0 taken 4006
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 6003
branch  5 taken 0
branch  6 taken 6003
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 4
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  668:    {
        -:  669:    case adventurer:
     4006:  670:	  return adventurerCardEffect(drawntreasure, cardDrawn, currentPlayer, temphand, state);
call    0 returned 4006
        -:  671:			
        -:  672:    case council_room:
    #####:  673:	  return councilRoomCardEffect(handPos, currentPlayer, state);
call    0 never executed
        -:  674:			
        -:  675:    case feast:
        -:  676:      //gain card with cost up to 5
        -:  677:      //Backup hand
    #####:  678:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  679:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  680:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  681:      }
        -:  682:      //Backup hand
        -:  683:
        -:  684:      //Update Coins for Buy
    #####:  685:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  686:      x = 1;//Condition to loop on
    #####:  687:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  688:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  689:	  if (DEBUG)
        -:  690:	    printf("None of that card left, sorry!\n");
        -:  691:
        -:  692:	  if (DEBUG){
        -:  693:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  694:	  }
        -:  695:	}
    #####:  696:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  697:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  698:
        -:  699:	  if (DEBUG){
        -:  700:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  701:	  }
        -:  702:	}
        -:  703:	else{
        -:  704:
        -:  705:	  if (DEBUG){
        -:  706:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  707:	  }
        -:  708:
    #####:  709:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  710:	  x = 0;//No more buying cards
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  714:	  }
        -:  715:
        -:  716:	}
        -:  717:      }     
        -:  718:
        -:  719:      //Reset Hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  721:	state->hand[currentPlayer][i] = temphand[i];
    #####:  722:	temphand[i] = -1;
        -:  723:      }
        -:  724:      //Reset Hand
        -:  725:      			
    #####:  726:      return 0;
        -:  727:			
        -:  728:    case gardens:
    #####:  729:      return -1;
        -:  730:			
        -:  731:    case mine:
     6003:  732:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  733:
     6003:  734:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 5835 (fallthrough)
branch  1 taken 168
branch  2 taken 2094 (fallthrough)
branch  3 taken 3741
        -:  735:	{
     2262:  736:	  return -1;
        -:  737:	}
        -:  738:		
     3741:  739:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 3741 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 3741
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
     3741:  744:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 3741
call    1 returned 3741
branch  2 taken 2580 (fallthrough)
branch  3 taken 1161
        -:  745:	{
     2580:  746:	  return -1;
        -:  747:	}
        -:  748:
     1161:  749:      gainCard(choice2, state, 2, currentPlayer);
call    0 returned 1161
        -:  750:
        -:  751:      //discard card from hand
     1161:  752:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1161
        -:  753:
        -:  754:      //discard trashed card
    27903:  755:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 27903
branch  1 taken 0 (fallthrough)
        -:  756:	{
    27903:  757:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 1161 (fallthrough)
branch  1 taken 26742
        -:  758:	    {
     1161:  759:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 1161
     1161:  760:	      break;
        -:  761:	    }
        -:  762:	}
        -:  763:			
     1161:  764:      return 0;
        -:  765:			
        -:  766:    case remodel:
    #####:  767:	  return remodelCardEffect(handPos, currentPlayer, choice1, choice2, state);
call    0 never executed
        -:  768:		
        -:  769:    case smithy:
     6003:  770:	  return smithyCardEffect(handPos, currentPlayer, state);
call    0 returned 6003
        -:  771:		
        -:  772:    case village:
    #####:  773:	  return villageCardEffect(handPos, currentPlayer, state);
call    0 never executed
        -:  774:		
        -:  775:    case baron:
    #####:  776:      state->numBuys++;//Increase buys by 1!
    #####:  777:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  778:	int p = 0;//Iterator for hand!
    #####:  779:	int card_not_discarded = 1;//Flag for discard set!
    #####:  780:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  781:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  782:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  783:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  784:	    state->discardCount[currentPlayer]++;
    #####:  785:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  786:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  787:	    }
    #####:  788:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  789:	    state->handCount[currentPlayer]--;
    #####:  790:	    card_not_discarded = 0;//Exit the loop
        -:  791:	  }
    #####:  792:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  793:	    if(DEBUG) {
        -:  794:	      printf("No estate cards in your hand, invalid choice\n");
        -:  795:	      printf("Must gain an estate if there are any\n");
        -:  796:	    }
    #####:  797:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  798:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  799:	      state->supplyCount[estate]--;//Decrement estates
    #####:  800:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  801:		isGameOver(state);
call    0 never executed
        -:  802:	      }
        -:  803:	    }
    #####:  804:	    card_not_discarded = 0;//Exit the loop
        -:  805:	  }
        -:  806:			    
        -:  807:	  else{
    #####:  808:	    p++;//Next card
        -:  809:	  }
        -:  810:	}
        -:  811:      }
        -:  812:			    
        -:  813:      else{
    #####:  814:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  816:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  817:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  818:	    isGameOver(state);
call    0 never executed
        -:  819:	  }
        -:  820:	}
        -:  821:      }
        -:  822:	    
        -:  823:      
    #####:  824:      return 0;
        -:  825:		
        -:  826:    case great_hall:
        -:  827:      //+1 Card
    #####:  828:      drawCard(currentPlayer, state);
call    0 never executed
        -:  829:			
        -:  830:      //+1 Actions
    #####:  831:      state->numActions++;
        -:  832:			
        -:  833:      //discard card from hand
    #####:  834:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  835:      return 0;
        -:  836:		
        -:  837:    case minion:
        -:  838:      //+1 action
    #####:  839:      state->numActions++;
        -:  840:			
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  843:			
    #####:  844:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  845:	{
    #####:  846:	  state->coins = state->coins + 2;
        -:  847:	}
        -:  848:			
    #####:  849:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  850:	{
        -:  851:	  //discard hand
    #####:  852:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  853:	    {
    #####:  854:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  855:	    }
        -:  856:				
        -:  857:	  //draw 4
    #####:  858:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  859:	    {
    #####:  860:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  861:	    }
        -:  862:				
        -:  863:	  //other players discard hand and redraw if hand size > 4
    #####:  864:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  865:	    {
    #####:  866:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  867:		{
    #####:  868:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  869:		    {
        -:  870:		      //discard hand
    #####:  871:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  872:			{
    #####:  873:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  874:			}
        -:  875:							
        -:  876:		      //draw 4
    #####:  877:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  878:			{
    #####:  879:			  drawCard(i, state);
call    0 never executed
        -:  880:			}
        -:  881:		    }
        -:  882:		}
        -:  883:	    }
        -:  884:				
        -:  885:	}
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case steward:
    #####:  889:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  890:	{
        -:  891:	  //+2 cards
    #####:  892:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  893:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  894:	}
    #####:  895:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  896:	{
        -:  897:	  //+2 coins
    #####:  898:	  state->coins = state->coins + 2;
        -:  899:	}
        -:  900:      else
        -:  901:	{
        -:  902:	  //trash 2 cards in hand
    #####:  903:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  904:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  905:	}
        -:  906:			
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  909:      return 0;
        -:  910:		
        -:  911:    case tribute:
    #####:  912:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  913:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  914:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:	  state->deckCount[nextPlayer]--;
        -:  916:	}
    #####:  917:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  918:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  919:	  state->discardCount[nextPlayer]--;
        -:  920:	}
        -:  921:	else{
        -:  922:	  //No Card to Reveal
        -:  923:	  if (DEBUG){
        -:  924:	    printf("No cards to reveal\n");
        -:  925:	  }
        -:  926:	}
        -:  927:      }
        -:  928:	    
        -:  929:      else{
    #####:  930:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  931:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  932:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  933:	    state->deckCount[nextPlayer]++;
    #####:  934:	    state->discard[nextPlayer][i] = -1;
    #####:  935:	    state->discardCount[nextPlayer]--;
        -:  936:	  }
        -:  937:			    
    #####:  938:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  939:	} 
    #####:  940:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  941:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  942:	state->deckCount[nextPlayer]--;
    #####:  943:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  944:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  945:	state->deckCount[nextPlayer]--;
        -:  946:      }    
        -:  947:		       
    #####:  948:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  949:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  950:	state->playedCardCount++;
    #####:  951:	tributeRevealedCards[1] = -1;
        -:  952:      }
        -:  953:
    #####:  954:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  955:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  956:	  state->coins += 2;
        -:  957:	}
        -:  958:		    
    #####:  959:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  960:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  961:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  962:	}
        -:  963:	else{//Action Card
    #####:  964:	  state->numActions = state->numActions + 2;
        -:  965:	}
        -:  966:      }
        -:  967:	    
    #####:  968:      return 0;
        -:  969:		
        -:  970:    case ambassador:
    #####:  971:      j = 0;		//used to check if player has enough cards to discard
        -:  972:
    #####:  973:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  974:	{
    #####:  975:	  return -1;				
        -:  976:	}
        -:  977:
    #####:  978:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  984:	{
    #####:  985:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  986:	    {
    #####:  987:	      j++;
        -:  988:	    }
        -:  989:	}
    #####:  990:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  991:	{
    #####:  992:	  return -1;				
        -:  993:	}
        -:  994:
        -:  995:      if (DEBUG) 
        -:  996:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  997:
        -:  998:      //increase supply count for choosen card by amount being discarded
    #####:  999:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1000:			
        -: 1001:      //each other player gains a copy of revealed card
    #####: 1002:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1005:	    {
    #####: 1006:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1007:	    }
        -: 1008:	}
        -: 1009:
        -: 1010:      //discard played card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1012:
        -: 1013:      //trash copies of cards returned to supply
    #####: 1014:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1017:	    {
    #####: 1018:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1019:		{
    #####: 1020:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1021:		  break;
        -: 1022:		}
        -: 1023:	    }
        -: 1024:	}			
        -: 1025:
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case cutpurse:
        -: 1029:
    #####: 1030:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1031:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1034:	    {
    #####: 1035:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1036:		{
    #####: 1037:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1038:		    {
    #####: 1039:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1040:		      break;
        -: 1041:		    }
    #####: 1042:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1043:		    {
    #####: 1044:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1045:			{
        -: 1046:			  if (DEBUG)
        -: 1047:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1048:			}	
    #####: 1049:		      break;
        -: 1050:		    }		
        -: 1051:		}
        -: 1052:					
        -: 1053:	    }
        -: 1054:				
        -: 1055:	}				
        -: 1056:
        -: 1057:      //discard played card from hand
    #####: 1058:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1059:
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:		
        -: 1063:    case embargo: 
        -: 1064:      //+2 Coins
        4: 1065:      state->coins = state->coins + 2;
        -: 1066:			
        -: 1067:      //see if selected pile is in play
        4: 1068:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:			
        -: 1073:      //add embargo token to selected supply pile
        4: 1074:      state->embargoTokens[choice1]++;
        -: 1075:			
        -: 1076:      //trash card
        4: 1077:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 4
        4: 1078:      return 0;
        -: 1079:		
        -: 1080:    case outpost:
        -: 1081:      //set outpost flag
    #####: 1082:      state->outpostPlayed++;
        -: 1083:			
        -: 1084:      //discard card
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1086:      return 0;
        -: 1087:		
        -: 1088:    case salvager:
        -: 1089:      //+1 buy
    #####: 1090:      state->numBuys++;
        -: 1091:			
    #####: 1092:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
        -: 1094:	  //gain coins equal to trashed card
    #####: 1095:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1096:	  //trash card
    #####: 1097:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1098:	}
        -: 1099:			
        -: 1100:      //discard card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case sea_hag:
    #####: 1105:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1106:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1107:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1108:	  state->discardCount[i]++;
    #####: 1109:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1110:	}
        -: 1111:      }
    #####: 1112:      return 0;
        -: 1113:		
        -: 1114:    case treasure_map:
        -: 1115:      //search hand for another treasure_map
    #####: 1116:      index = -1;
    #####: 1117:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1118:	{
    #####: 1119:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1120:	    {
    #####: 1121:	      index = i;
    #####: 1122:	      break;
        -: 1123:	    }
        -: 1124:	}
    #####: 1125:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1126:	{
        -: 1127:	  //trash both treasure cards
    #####: 1128:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1129:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1130:
        -: 1131:	  //gain 4 Gold cards
    #####: 1132:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1133:	    {
    #####: 1134:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1135:	    }
        -: 1136:				
        -: 1137:	  //return success
    #####: 1138:	  return 1;
        -: 1139:	}
        -: 1140:			
        -: 1141:      //no second treasure_map found in hand
    #####: 1142:      return -1;
        -: 1143:    }
        -: 1144:	
    #####: 1145:  return -1;
        -: 1146:}
        -: 1147:
        -: 1148:
        -: 1149:/*** ASSIGNMENT 2 REFACTORED CARD FUNCTIONS ***/
        -: 1150:
function smithyCardEffect called 6003 returned 100% blocks executed 71%
     6003: 1151:int smithyCardEffect(int handPos, int currentPlayer, struct gameState *state) {
        -: 1152:	//+3 Cards
        -: 1153:	int i;
     6003: 1154:	for (i = 0; i > 3; i++)
branch  0 taken 0
branch  1 taken 6003 (fallthrough)
        -: 1155:	{
    #####: 1156:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1157:	}
        -: 1158:
        -: 1159:	//discard card from hand
     6003: 1160:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 6003
     6003: 1161:	return 0;
        -: 1162:}
        -: 1163:
function adventurerCardEffect called 4006 returned 100% blocks executed 100%
     4006: 1164:int adventurerCardEffect(int drawntreasure, int cardDrawn, int currentPlayer, int* temphand, struct gameState *state) {
        -: 1165:	
     4006: 1166:	int z = 0;
   111850: 1167:	while (drawntreasure<2) {
branch  0 taken 103838
branch  1 taken 4006 (fallthrough)
   103838: 1168:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 324 (fallthrough)
branch  1 taken 103514
      324: 1169:			shuffle(currentPlayer, state);
call    0 returned 324
        -: 1170:		}
   103838: 1171:		drawCard(currentPlayer, state);
call    0 returned 103838
   103838: 1172:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
   103838: 1173:		if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 99832 (fallthrough)
branch  1 taken 4006
branch  2 taken 4006 (fallthrough)
branch  3 taken 95826
     8012: 1174:			drawntreasure++;
        -: 1175:		else {
    95826: 1176:			temphand[z] = cardDrawn;
    95826: 1177:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    95826: 1178:			z++;
        -: 1179:		}
        -: 1180:	}
   103838: 1181:	while (z - 1 >= 0) {
branch  0 taken 95826
branch  1 taken 4006 (fallthrough)
    95826: 1182:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    95826: 1183:		z = z - 1;
        -: 1184:	}
        -: 1185:
     4006: 1186:	return 0;
        -: 1187:}
        -: 1188:
function villageCardEffect called 0 returned 0% blocks executed 0%
    #####: 1189:int villageCardEffect(int currentPlayer, int handPos, struct gameState *state) {
        -: 1190:	//+1 Card
    #####: 1191:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1192:
        -: 1193:	//+2 Actions
    #####: 1194:	state->numActions = state->numActions + 2;
        -: 1195:
        -: 1196:	//discard played card from hand
    #####: 1197:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1198:	return 0;
        -: 1199:}
        -: 1200:
function councilRoomCardEffect called 0 returned 0% blocks executed 0%
    #####: 1201:int councilRoomCardEffect(int handPos, int currentPlayer, struct gameState *state) {
        -: 1202:	
        -: 1203:	//+4 Cards
        -: 1204:	int i;
    #####: 1205:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1206:	{
    #####: 1207:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1208:	}
        -: 1209:
        -: 1210:	//+1 Buy
    #####: 1211:	state->numBuys++;
        -: 1212:
        -: 1213:	//Each other player draws a card
    #####: 1214:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:		if (i == currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1217:		{
    #####: 1218:			drawCard(i, state);
call    0 never executed
        -: 1219:		}
        -: 1220:	}
        -: 1221:
        -: 1222:	////put played card in played card pile
    #####: 1223:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1224:
    #####: 1225:	return 0;
        -: 1226:}
        -: 1227:
function remodelCardEffect called 0 returned 0% blocks executed 0%
    #####: 1228:int remodelCardEffect(int handPos, int currentPlayer, int choice1, int choice2, struct gameState *state) {
        -: 1229:	
        -: 1230:	int j;
    #####: 1231:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1232:
    #####: 1233:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1234:	{
    #####: 1235:		return -1;
        -: 1236:	}
        -: 1237:
    #####: 1238:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1239:
        -: 1240:	//discard card from hand
    #####: 1241:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1242:
        -: 1243:	//discard trashed card
        -: 1244:	int i;
    #####: 1245:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1248:		{
    #####: 1249:			discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1250:			break;
        -: 1251:		}
        -: 1252:	}
        -: 1253:
        -: 1254:
    #####: 1255:	return 0;
        -: 1256:}
        -: 1257:
        -: 1258:/*** END ASSIGNMENT 2 REFACTORED CARD FUNCTIONS ***/
        -: 1259:
function discardCard called 8335 returned 100% blocks executed 100%
     8335: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:	
        -: 1263:  //if card is not trashed, added to Played pile 
     8335: 1264:  if (trashFlag < 1)
branch  0 taken 8328 (fallthrough)
branch  1 taken 7
        -: 1265:    {
        -: 1266:      //add card to played pile
     8328: 1267:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8328: 1268:      state->playedCardCount++;
        -: 1269:    }
        -: 1270:	
        -: 1271:  //set played card to -1
     8335: 1272:  state->hand[currentPlayer][handPos] = -1;
        -: 1273:	
        -: 1274:  //remove card from player's hand
     8335: 1275:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 5470 (fallthrough)
branch  1 taken 2865
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
     5470: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
     2865: 1280:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 3 (fallthrough)
branch  1 taken 2862
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
        3: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:  else 	
        -: 1286:    {
        -: 1287:      //replace discarded card with last card in hand
     2862: 1288:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:      //set last card to -1
     2862: 1290:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:      //reduce number of cards in hand
     2862: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:	
     8335: 1295:  return 0;
        -: 1296:}
        -: 1297:
function gainCard called 23206 returned 100% blocks executed 100%
    23206: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:  //Note: supplyPos is enum of choosen card
        -: 1301:	
        -: 1302:  //check if supply pile is empty (0) or card is not used in game (-1)
    23206: 1303:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 23206
branch  1 taken 2462 (fallthrough)
branch  2 taken 20744
        -: 1304:    {
     2462: 1305:      return -1;
        -: 1306:    }
        -: 1307:	
        -: 1308:  //added card for [whoseTurn] current player:
        -: 1309:  // toFlag = 0 : add to discard
        -: 1310:  // toFlag = 1 : add to deck
        -: 1311:  // toFlag = 2 : add to hand
        -: 1312:
    20744: 1313:  if (toFlag == 1)
branch  0 taken 20 (fallthrough)
branch  1 taken 20724
        -: 1314:    {
       20: 1315:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       20: 1316:      state->deckCount[player]++;
        -: 1317:    }
    20724: 1318:  else if (toFlag == 2)
branch  0 taken 20718 (fallthrough)
branch  1 taken 6
        -: 1319:    {
    20718: 1320:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    20718: 1321:      state->handCount[player]++;
        -: 1322:    }
        -: 1323:  else
        -: 1324:    {
        6: 1325:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1326:      state->discardCount[player]++;
        -: 1327:    }
        -: 1328:	
        -: 1329:  //decrease number in supply pile
    20744: 1330:  state->supplyCount[supplyPos]--;
        -: 1331:	 
    20744: 1332:  return 0;
        -: 1333:}
        -: 1334:
function updateCoins called 28 returned 100% blocks executed 82%
       28: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:  int i;
        -: 1338:	
        -: 1339:  //reset coin count
       28: 1340:  state->coins = 0;
        -: 1341:
        -: 1342:  //add coins for each Treasure card in player's hand
      168: 1343:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 140
branch  1 taken 28 (fallthrough)
        -: 1344:    {
      140: 1345:      if (state->hand[player][i] == copper)
branch  0 taken 112 (fallthrough)
branch  1 taken 28
        -: 1346:	{
      112: 1347:	  state->coins += 1;
        -: 1348:	}
       28: 1349:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 28
        -: 1350:	{
    #####: 1351:	  state->coins += 2;
        -: 1352:	}
       28: 1353:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 28
        -: 1354:	{
    #####: 1355:	  state->coins += 3;
        -: 1356:	}	
        -: 1357:    }	
        -: 1358:
        -: 1359:  //add bonus
       28: 1360:  state->coins += bonus;
        -: 1361:
       28: 1362:  return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
